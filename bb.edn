{:paths ["libsci/bb"]
 :deps {io.github.borkdude/quickdoc
        #_{:local/root "/Users/borkdude/dev/quickdoc"}
        {:git/url "https://github.com/borkdude/quickdoc"
         :git/sha "32e726cd6d785d00e49d4e614a05f7436d3831c0"}}

 :tasks
 {test:jvm  {:doc "Run CLJ tests with leiningen"
             :task (shell "script/test/jvm")}

  test:native  {:doc "Run CLJ tests with leiningen"
                :task (do (shell "script/compile")
                          (shell {:extra-env {"SCI_TEST_ENV" "native"}}
                                 "script/test/jvm"))}

  test:node {:doc "Run CLJS tests with Node.js"
             :task (shell "script/test/node")}

  test:self-hosted {:doc "Run CLJS test with self-hosted"
                    :task (shell "plk -A:test -K -m sci.test-runner")}
  quickdoc {:doc "Invoke quickdoc"
            :requires ([quickdoc.api :as api])
            :task (let [{:keys [markdown]}
                        (api/quickdoc {:outfile nil
                                       :toc true
                                       :git/branch "master"
                                       :github/repo "https://github.com/babashka/sci"
                                       :overrides {'sci.lang {'->Type {:no-doc true}
                                                              '->Var {:no-doc true}
                                                              '->Namespace {:no-doc true}
                                                              'IVar {:no-doc true}}}})
                        markdown (str (slurp "test-resources/API-prelude.md") markdown)]
                    (spit "API.md" markdown))}

  shadow-build-report {:doc "Run shadow-cljs for build report"
                       :task (shell "npx shadow-cljs release sci")}

  libsci:compile libsci-tasks/compile-native
  libsci:compile-c libsci-tasks/compile-c
  libsci:compile-cpp libsci-tasks/compile-cpp
  libsci:compile-rust libsci-tasks/compile-rust

  libsci:compile-all {:doc "Compile libsci and the example C, C++ and rust programs to `libsci/target/`."
                      :depends [libsci:compile libsci:compile-c
                                libsci:compile-cpp libsci:compile-rust]}

  libsci:test libsci-tasks/test}}
